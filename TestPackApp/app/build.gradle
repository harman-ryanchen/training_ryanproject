apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    //init the localproperties, can setting something on locl properties if do not want to sharing
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    def versionMajor = localProperties.get('versionMajor', '1')
    def versionMinor = localProperties.get('versionMinor', '0')
    // Note: When not using the build server ensure that wear project has same version number.
    def versionPatch = localProperties.get('versionPatch', '0')
    def howSpecial = localProperties.get('howSpecial', "")
    defaultConfig {
        buildConfigField "boolean", "OPEN_FAKE_DATA", localProperties.get('openFakeData', false)
        applicationId "ryan.testpackapp"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
    }


    applicationVariants.all { variant ->
        def versionSuffix = '_' + variant.properties['flavorName'] + '_' + variant.properties['buildType'].name;
        variant.mergedFlavor.versionName = "${versionMajor}.${versionMinor}.${versionPatch}" + versionSuffix;
    }

    signingConfigs {
        release {
            storeFile file(localProperties['storeFile'])
            // Set these system properties in local.properties to use this keystore.
            keyAlias localProperties['keyAlias']
            keyPassword localProperties['keyPassword']
            storePassword localProperties['storePassword']
        }
        debug {
            // This key is created automatically by Android Studio.
            storeFile file(System.properties['user.home'] + '/.android/debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    // rename the apk with the version name
    // add output file sub folder by build type
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent + "/${variant.buildType.name}",
                    "${variant.versionName}_${releaseTime()}_${howSpecial}.apk".toLowerCase())
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release //confirm weather release? release/debug
            manifestPlaceholders = [BUILD_TYPE_VALUE: "app_release"]
        }
        debug {
            minifyEnabled false
            manifestPlaceholders = [BUILD_TYPE_VALUE: "app_debug"]
        }
    }
    flavorDimensions "version", "abi"
    productFlavors {
        googleplay {
            dimension "version"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "googleplay"]
        }
        wandoujia {
            dimension "version"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        _SQAtest{
            dimension "abi"
            buildConfigField "String", "CONFIG_URL", '"http://storage.harman.com/Testing/FCSQA/30/config_test.data"'
        }
        _beta{
            dimension "abi"
            buildConfigField "String", "CONFIG_URL", '"http://storage.harman.com/Testing/FC/30/config_beta.data"'
        }
        _product{
            dimension "abi"
            buildConfigField "String", "CONFIG_URL", '"http://storage.harman.com/FC/30/config.data"'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
}
